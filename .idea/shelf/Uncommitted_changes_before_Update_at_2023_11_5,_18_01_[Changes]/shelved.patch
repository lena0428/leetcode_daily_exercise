Index: leetcode_daily_exercise/src/c_sliding_window/Solution567.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/leetcode_daily_exercise/src/c_sliding_window/Solution567.java b/leetcode_daily_exercise/src/c_sliding_window/Solution567.java
new file mode 100644
--- /dev/null	(date 1699236001256)
+++ b/leetcode_daily_exercise/src/c_sliding_window/Solution567.java	(date 1699236001256)
@@ -0,0 +1,39 @@
+package c_sliding_window;
+
+import java.util.Arrays;
+
+/**
+ * @program: leetcode
+ * @description: https://leetcode.com/problems/permutation-in-string/description/
+ * @author: Yidan
+ * @create: 2023-11-05 17:59
+ **/
+
+public class Solution567 {
+  public boolean checkInclusion(String s1, String s2) {
+    int left = 0;
+    int right = 0;
+    int[] count = new int[26];
+    while (right < s2.length()) {
+      if (checkIfPermutation(s1, s2.substring(left, right + 1))) {
+        return true;
+      }
+      right++;
+      if (right - left + 1 > s1.length()) {
+        left++;
+      }
+    }
+    return false;
+  }
+
+  public boolean checkIfPermutation(String a, String b) {
+    int[] count = new int[26];
+    for (int i = 0; i < a.length(); i++) {
+      count[a.charAt(i) - 'a']++;
+    }
+    for (int i = 0; i < b.length(); i++) {
+      count[b.charAt(i) - 'a']--;
+    }
+    return Arrays.stream(count).max().getAsInt() == 0 && Arrays.stream(count).min().getAsInt() == 0;
+  }
+}
\ No newline at end of file
